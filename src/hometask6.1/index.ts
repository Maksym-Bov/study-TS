// Визначте інтерфейс, який використовує сигнатуру індексу з типами об'єднання. Наприклад, тип значення для кожного ключа може бути число | рядок.
interface IObject{
    [key: string]: string | number;
}

// Створіть інтерфейс, у якому типи значень у сигнатурі індексу є функціями. Ключами можуть бути рядки, а значеннями — функції, які приймають будь-які аргументи.
interface IObjectSecond{
    [key: string]: (...args: any[]) => any;
}

//Опишіть інтерфейс, який використовує сигнатуру індексу для опису об'єкта, подібного до масиву. Ключі повинні бути числами, а значення - певного типу.
interface IObjectThird{
    [key: number]: string;
}

// Створіть інтерфейс з певними властивостями та індексною сигнатурою. Наприклад, ви можете мати властивості типу name: string та індексну сигнатуру для додаткових динамічних властивостей.
interface IObjectFourth{
    name: string;
    [key: string]: any;
}
//Створіть два інтерфейси, один з індексною сигнатурою, а інший розширює перший, додаючи специфічні властивості.
interface IObjectFifth{
    [key: string]: string | number;
}
interface IObjectSixth extends IObjectFifth{
    name: string;
}

//Напишіть функцію, яка отримує об'єкт з індексною сигнатурою і перевіряє, чи відповідають значення певних ключів певним критеріям (наприклад, чи всі значення є числами).
function functionObject(obj: IObject){
    for (let key in obj){
        if (typeof obj[key] !== 'number' && typeof obj[key] !== 'string'){
            return false;
        }
    }
    return true;
}
